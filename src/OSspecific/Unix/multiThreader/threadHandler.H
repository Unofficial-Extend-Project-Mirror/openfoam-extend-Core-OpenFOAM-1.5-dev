/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright held by original author
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Class
    threadHandler

Description
    Helper class used to assist in multi-threading and synchronization.

    Use this class to pass information to a threaded static member-function
    belonging to the class T.

Author
    Sandeep Menon
    University of Massachusetts Amherst
    All rights reserved

SourceFiles
    threadHandlerI.H

\*---------------------------------------------------------------------------*/

#ifndef threadHandler_H
#define threadHandler_H

#include "FixedList.H"
#include "List.H"
#include "multiThreader.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                           Class threadHandler Declaration
\*---------------------------------------------------------------------------*/

template<class T>
class threadHandler
{
    // Reference to the template class
    T& tRef_;

    // Reference to the multiThreader class
    const multiThreader& threader_;

    // List of function argument pointers
    List<void *> argList_;

    // Total number of threads
    const label nThreads_;

    // ID generated by the pthreads API
    pthread_t pthreadID_;

    // Is this a master/slave thread
    bool master_;

    // Synchronization mutexes
    Mutex startMutex_;
    Mutex stopMutex_;

    // Conditionals for synchronization
    Conditional startConditional_;
    Conditional stopConditional_;

    // On some implementations, a conditional wait
    // might return prematurely due to a spurious
    // wake-up signal. Use a predicate to avoid this
    // behaviour.
    FixedList<bool, 2> predicate_;

public:

    // Enumerants for signalling
    enum signalType
    {
        START,
        STOP
    };

    // Constructor
    threadHandler
    (
        T& tPtr,
        const multiThreader& threader
    );

    // Destructor
    ~threadHandler();

    // Return a reference to the template class
    inline T& reference();

    // Set a size for the argument list
    inline void setSize(const label size);

    // Set a argument pointer for a particular index
    inline void set(const label index, void* argPtr);

    // Return a reference to the multiThreader
    inline const multiThreader& threader();

    // Return the number of threads
    inline label nThreads();

    // Designate as master thread
    inline void setMaster();

    // Designate as slave thread
    inline void setSlave();

    // Is this a master thread?
    inline bool master();

    // Is this a slave thread?
    inline bool slave();

    // Lock this thread
    inline void lock(const signalType sType);

    // Unlock this thread
    inline void unlock(const signalType sType);

    // Send signal to a waiting conditional
    inline void sendSignal(const signalType sType);

    // Wait for signal
    inline void waitForSignal(const signalType sType);

    // Return state of the predicate variable
    inline bool predicate(const signalType sType);

    // Set the predicate variable
    inline void setPredicate(const signalType sType);

    // Unset the predicate variable
    inline void unsetPredicate(const signalType sType);

    // Set the ID
    inline void setID(const pthread_t& pt);

    // Return the ID
    inline pthread_t ID() const;

    // Return an argument pointer at a particular index
    inline void * operator()(const label index);
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "threadHandlerI.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
