/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.4.1                                 |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version 2.0;
    format ascii;

    root     "/home/jovani/OpenFOAM/jovani-1.4.1/run/tutorials/viscoelasticFluidFoam";
    case     "PP";
    instance "system";
    local "";

    class           dictionary;
    object          fvSchemes;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         CrankNicholson 1;

}

gradSchemes
{
    default         Gauss linear;
    grad(p)         Gauss linear;
    grad(U)         Gauss linear;

}

divSchemes
{
    default                  none;
    div(phi,U)               Gauss upwind; //GammaV 0.5;

    div(phi,Sfirst)          Gauss upwind; //Gamma 0.5;
    div(phi,Ssecond)         Gauss upwind; //Gamma 0.5;
    div(phi,Sthird)          Gauss upwind; //Gamma 0.5;
    div(phi,Sfourth)         Gauss upwind; //Gamma 0.5;
    div(phi,Sfifth)          Gauss upwind; //Gamma 0.5;
    div(phi,Ssixth)          Gauss upwind; //Gamma 0.5;
    div(phi,Sseventh)        Gauss upwind; //Gamma 0.5;

    div(phi,Lambdafirst)     Gauss upwind; //Gamma 0.5;
    div(phi,Lambdasecond)    Gauss upwind; //Gamma 0.5;
    div(phi,Lambdathird)     Gauss upwind; //Gamma 0.5;
    div(phi,Lambdafourth)    Gauss upwind; //Gamma 0.5;
    div(phi,Lambdafifth)     Gauss upwind; //Gamma 0.5;
    div(phi,Lambdasixth)     Gauss upwind; //Gamma 0.5;
    div(phi,Lambdaseventh)   Gauss upwind; //Gamma 0.5;

    div(tau)                 Gauss linear;
}

laplacianSchemes
{
    default                      none;
    laplacian(etaPEff,U)         Gauss linear corrected;
    laplacian(etaPEff+etaS,U)    Gauss linear corrected;
    laplacian((1|A(U)),p)        Gauss linear corrected;
}

interpolationSchemes
{
    default           linear;
    interpolate(HbyA) linear;
}

snGradSchemes
{
    default         corrected;
}

fluxRequired
{
    default         no;
    p;
}


// ************************************************************************* //
