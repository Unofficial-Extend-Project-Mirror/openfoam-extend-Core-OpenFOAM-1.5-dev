#!/bin/sh
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | Copyright held by original author
#    \\/     M anipulation  |
#-------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software; you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by the
#     Free Software Foundation; either version 2 of the License, or (at your
#     option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM; if not, write to the Free Software Foundation,
#     Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
#
# Script
#     dxFoam
#
# Description
#     Startup script for DX with Foam reader.
#------------------------------------------------------------------------------

# findExec path executable
# prints pathname to executable (if found)
# returns 0 if found
#         1 if not found
findExec() {
  oldIFS=$IFS
  IFS=':'
  for d in $1
  do
      #echo "testing: $d/$2" 1>&2
      if [ -x "$d/$2" -a ! -d "$d/$2" ]; then
          #echo "Found exec: $d/$2" 1>&2
          IFS=$oldIFS
          echo "$d/$2"
          return 0
      fi
  done
  IFS=$oldIFS
  echo ""
  return 1
}

# rmNonExisting path
#
# Prints all pathnames minus the non-existing ones
rmNonExisting() {
  oldIFS=$IFS
  IFS=':'
  newPath=''
  for d in $1
  do
      if [ -r $d ]; then
          if [ "$newPath" ]; then
              newPath="$newPath:$d"
          else
              newPath="$d"
          fi
      fi
  done
  IFS=$oldIFS
  echo "$newPath"
}


#------------------------------------------------------------------------------
# Start of main
#------------------------------------------------------------------------------

if [ ! "$WM_PROJECT_VERSION" ]; then
    echo "Environment variable WM_PROJECT_VERSION not set."
    exit 1
fi

NETWORK_DIR=$WM_PROJECT_DIR/.$WM_PROJECT-${WM_PROJECT_VERSION}/apps/dxFoam/networks

if [ $# -ge 1 ]; then
    NETWORK=$1
    shift
else
    NETWORK=postFoam
fi

NETWORK_FILE=$NETWORK_DIR/${NETWORK}.net

# Make sure dx can be found.
echo "Checking path to dx ..."
dxExec=`findExec "$PATH" dx`
if [ $? -ne 0 ]; then
    echo "Can't find dx executable. Please check your path."
    exit 1
fi

# Make sure that the network exists.
if [ ! -f "$NETWORK_FILE" ] ; then
    echo "Can't find OpenDX Foam network:"
    echo "  $NETWORK_FILE"
    exit 1
fi

# For finding macros in DX networks
DXMACROS=`rmNonExisting "$DXMACROS"`
export DXMACROS


#
# Check for library libdxFoamExec.so or executable dxFoamExec
#

echo "Checking path to dxFoamExec executable ..."
dxFoamExec=`findExec "$PATH" dxFoamExec`
if [ $? -ne 0 ]; then
    echo "Can't find dxFoamExec executable. Please check your path."
    exit 1
fi


#- For 'inboard' modules. Requires dxFoamExec as a replacement of dxexec.
mdfFile="$FOAM_APP/utilities/postProcessing/graphics/dxFoamExec/dxFoamExec.mdf"

if [ ! -r "$mdfFile" ] ; then
    echo "Can't find module file $mdfFile."
    echo "Please check your installation."
    exit 1
fi

cmd="$dxExec -exec dxFoamExec -mdf $mdfFile -image -noEditorOnError -execute_on_change $NETWORK_FILE $*"
echo "Starting dx with dxFoamExec executable ..."
$cmd

#------------------------------------------------------------------------------
